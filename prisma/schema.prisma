generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  student       Student?
  teacher       Teacher?
}

model Student {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  grade         String
  section       String
  admissionDate DateTime  @default(now())
  attendance    Attendance[]
  examResults   ExamResult[]
  fees          Fee[]
  enrollments   Enrollment[]
}

model Teacher {
  id             String    @id @default(cuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id])
  specialization String
  joinDate       DateTime  @default(now())
  classes        Class[]
}

model Class {
  id          String    @id @default(cuid())
  subject     String
  grade       String
  section     String
  teacherId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  enrollments Enrollment[]
  examResults ExamResult[]
  attendance  Attendance[]
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())

  @@unique([studentId, classId])
}

model Attendance {
  id        String   @id @default(cuid())
  date      DateTime
  status    Status   @default(PRESENT)
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, classId, date])
}

model ExamResult {
  id        String   @id @default(cuid())
  marks     Float
  examDate  DateTime
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fee {
  id        String     @id @default(cuid())
  amount    Float
  dueDate   DateTime
  status    FeeStatus  @default(PENDING)
  studentId String
  student   Student    @relation(fields: [studentId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Status {
  PRESENT
  ABSENT
  LATE
}

enum FeeStatus {
  PAID
  PENDING
  OVERDUE
}
